SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[GetPriceApprovalRequests]
    @RequestID NVARCHAR(50),
    @Status INT,
    @Id NVARCHAR(50),
    @Role NVARCHAR(50)    
AS
BEGIN
    DECLARE @MaxStatus INT;

SELECT @MaxStatus = MAX(status)
FROM [PriceApprovalSystem].[dbo].[requests_mvc]
WHERE req_id = @RequestID;

-- If the status parameter is not equal to the maximum status, return an empty result set
IF @Status <> @MaxStatus
BEGIN
    SELECT 
        NULL AS request_name,
        NULL AS customer_name,
        NULL AS customer_ids,
        NULL AS consignee_name,
        NULL AS consignee_ids,
        NULL AS enduse_name,
        NULL AS end_use_id,
        NULL AS plant,
        NULL AS valid_from,
        NULL AS valid_to,
        NULL AS payment_terms_id
    WHERE 1 = 0; -- This will return an empty result set
END
ELSE
BEGIN
    -- Use a CTE to fetch the latest status for the request ID
    WITH LatestStatus AS (
        SELECT TOP (1) 
            req_id,
            status
        FROM 
            [PriceApprovalSystem].[dbo].[requests_mvc]
        WHERE 
            req_id = @RequestID
        ORDER BY 
            id DESC -- Assuming id is a sequential identifier for ordering
    )
    
    SELECT 
        rm.parent_request_id as request_name,
        c.name AS customer_name, 
        par.customer_id AS customer_ids,
        consignee.name AS consignee_name, 
        par.consignee_id AS consignee_ids,
        enduse.name AS enduse_name,
        par.end_use_id,
        par.plant,
        CONVERT(VARCHAR, CAST(par.valid_from AS DATETIME), 103) AS valid_from,
        CONVERT(VARCHAR, CAST(par.valid_to AS DATETIME), 103) AS valid_to,
        par.payment_terms_id,
        par.mappint_type

    FROM 
        price_approval_requests par
    LEFT JOIN 
        customer c ON par.customer_id = c.id
    LEFT JOIN 
        customer consignee ON par.consignee_id = consignee.id
    LEFT JOIN 
        customer enduse ON par.end_use_id = enduse.id
    JOIN 
        LatestStatus ls ON par.request_name = ls.req_id
    JOIN 
        requests_mvc rs ON par.request_name = rs.req_id
    JOIN 
        transaction_mvc tmvc ON par.request_name = tmvc.request_id
    INNER JOIN 
        price_approval_requests_price_table parpt ON par.request_name = parpt.req_id
    INNER JOIN 
        profit_center PC ON parpt.grade = PC.Grade
    INNER JOIN 
        business_admin_variables BAV ON BAV.value = LEFT(CAST(ABS(PC.Profit_Centre) AS VARCHAR(10)), 1)
    JOIN 
        define_roles dr ON tmvc.last_updated_by_id = dr.employee_id
    INNER JOIN
        request_mapper rm ON rm.request_id = par.request_name 
    WHERE 
        par.request_name = @RequestID
        AND BAV.[key] = @Role
        AND dr.region IN (SELECT region FROM [PriceApprovalSystem].[dbo].[define_roles] WHERE employee_id = @Id)
        AND rs.status = @Status -- Filter based on the parameterized status
        AND ls.status = (SELECT TOP 1 status FROM LatestStatus ORDER BY req_id DESC) -- Ensure matching latest status
        AND @Status <= @MaxStatus; -- Ensure @Status is within valid range
END

END;
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[GetPriceApprovalRequestsHigh]
    @RequestID NVARCHAR(50),
    @Status INT,
    @Role NVARCHAR(50)
    -- @Id INT
AS
BEGIN
    DECLARE @MaxStatus INT;

SELECT @MaxStatus = MAX(status)
FROM [PriceApprovalSystem].[dbo].[requests_mvc]
WHERE req_id = @RequestID;

-- If the status parameter is not equal to the maximum status, return an empty result set
IF @Status <> @MaxStatus
BEGIN
    SELECT 
        NULL AS request_name,
        NULL AS customer_name,
        NULL AS customer_ids,
        NULL AS consignee_name,
        NULL AS consignee_ids,
        NULL AS enduse_name,
        NULL AS end_use_id,
        NULL AS plant,
        NULL AS valid_from,
        NULL AS valid_to,
        NULL AS payment_terms_id
    WHERE 1 = 0; -- This will return an empty result set
END
ELSE
BEGIN
    -- Use a CTE to fetch the latest status for the request ID
    WITH LatestStatus AS (
        SELECT TOP (1) 
            req_id,
            status
        FROM 
            [PriceApprovalSystem].[dbo].[requests_mvc]
        WHERE 
            req_id = @RequestID
        ORDER BY 
            id DESC -- Assuming id is a sequential identifier for ordering
    )
    
    SELECT 
        rm.parent_request_id as request_name,
        c.name AS customer_name, 
        par.customer_id AS customer_ids,
        consignee.name AS consignee_name, 
        par.consignee_id AS consignee_ids,
        enduse.name AS enduse_name,
        par.end_use_id,
        par.plant,
        CONVERT(VARCHAR, CAST(par.valid_from AS DATETIME), 103) AS valid_from,
        CONVERT(VARCHAR, CAST(par.valid_to AS DATETIME), 103) AS valid_to,
        par.payment_terms_id,
        par.mappint_type
    FROM 
        price_approval_requests par
    LEFT JOIN 
        customer c ON par.customer_id = c.id
    LEFT JOIN 
        customer consignee ON par.consignee_id = consignee.id
    LEFT JOIN 
        customer enduse ON par.end_use_id = enduse.id
    JOIN 
        LatestStatus ls ON par.request_name = ls.req_id
    JOIN 
        requests_mvc rs ON par.request_name = rs.req_id
    JOIN 
        transaction_mvc tmvc ON par.request_name = tmvc.request_id
    INNER JOIN 
        price_approval_requests_price_table parpt ON par.request_name = parpt.req_id
    INNER JOIN 
        profit_center PC ON parpt.grade = PC.Grade
    INNER JOIN 
        business_admin_variables BAV ON BAV.value = LEFT(CAST(ABS(PC.Profit_Centre) AS VARCHAR(10)), 1)
    INNER JOIN
        request_mapper rm ON rm.request_id = par.request_name 
    -- JOIN 
    --     define_roles dr ON tmvc.last_updated_by_id = dr.employee_id
    WHERE 
        par.request_name = @RequestID
        AND BAV.[key] = @Role
        -- AND dr.region IN (SELECT region FROM [PriceApprovalSystem].[dbo].[define_roles] WHERE employee_id = @Id)
        AND rs.status = @Status -- Filter based on the parameterized status
        AND ls.status = (SELECT TOP 1 status FROM LatestStatus ORDER BY par.req_id DESC) -- Ensure matching latest status
        AND @Status <= @MaxStatus; -- Ensure @Status is within valid range
END

END;
GO
